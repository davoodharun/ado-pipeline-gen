parameters:
  - name: repository
    type: string
  - name: project
    type: string
  - name: storageAccountName
    type: string
  - name: storageAccountRG
    type: string
  - name: containerName
    type: string
  - name: pipeline_location
    type: string

jobs:
  - job: Pipeline_${{ replace(parameters.repository, '-', '_') }}
    displayName: "Configure Pipeline for ${{ parameters.repository }}"
    variables:
      formattedRepoName: ${{ lower(replace(parameters.repository, '-', '_')) }}
    steps:
      # Install Node.js runtime environment for running JavaScript scripts
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'

      # Install dependencies
      - script: |
          npm install
        displayName: "Install dependencies"

      # Execute the script that checks pipeline configurations for this repository
      - script: |
          node get-pipeline-config.js "${{ parameters.repository }}" "${{ parameters.project }}"
        displayName: "Download pipeline configuration for ${{ parameters.repository }}"
        env:
          AZDO_ORG_SERVICE_URL: $(System.TeamFoundationCollectionUri)
          AZDO_PERSONAL_ACCESS_TOKEN: $(PAT)

      # Install Terraform
      - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        inputs:
          terraformVersion: 'latest'
        displayName: 'Install Terraform'

      # Set environment variables for Azure DevOps provider
      - script: |
          echo "##vso[task.setvariable variable=AZDO_ORG_SERVICE_URL]$(System.TeamFoundationCollectionUri)"
          echo "##vso[task.setvariable variable=AZDO_PERSONAL_ACCESS_TOKEN]$(PAT)"
        displayName: 'Set Azure DevOps Provider Variables'

      # Initialize Terraform
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          backendType: 'azurerm'
          backendServiceArm: 'EU Digital Non-Prod'
          backendAzureRmResourceGroupName: '${{ parameters.storageAccountRG }}'
          backendAzureRmStorageAccountName: '${{ parameters.storageAccountName }}'
          backendAzureRmContainerName: '${{ parameters.containerName }}'
          backendAzureRmKey: 'pipeline_$(formattedRepoName).tfstate'
        displayName: 'Terraform Init'

      # Add a debug step to verify backend configuration
      - script: |
          echo "Checking Terraform state..."
          terraform show
          echo "Checking backend configuration..."
          terraform workspace show
        displayName: 'Debug Terraform State'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

      # Apply Terraform configuration
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
          environmentServiceConnection: 'EU Digital Non-Prod'
          commandOptions: '-auto-approve -var="repository_id=${{ parameters.repositoryName }}" -var-file="pipelines.json"'
        displayName: 'Terraform Apply'
  